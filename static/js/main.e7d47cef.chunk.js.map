{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7d47cef.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = () => (\r\n\r\n        \r\n            <div>\r\n            <h1 className=\"title-container__title\">Weather Spy App</h1>\r\n            <p className=\"title-container__subtitle\">Find out temperature, conditions and more</p>\r\n            </div>\r\n        \r\n    \r\n            );\r\nexport default Titles;","import React from 'react';\r\n\r\n\r\nconst Form =(props)=> {\r\n    \r\n        return (\r\n            <div>\r\n               <form onSubmit={props.getWeather}>\r\n               <input type='text'  name=\"city\" placeholder=\"City....\"/>\r\n                <input type='text'  name=\"country\" placeholder=\"Country....\"/>\r\n               \r\n                <button>Get Weather Info</button>\r\n               </form>\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather =(props)=>{\r\n \r\n        return (\r\n            <div className=\"weather__info\">\r\n            <h1>Weather Report</h1>\r\n              \r\n            {props.city && props.country && <p className=\"weather_key\">Loation : {props.city},{props.country}</p>} \r\n             {props.temperature && <p className=\"weather_key\"> Temapture : {props.temperature}</p>} \r\n             {props.humidity && <p className=\"weather_key\"> Humidity: {props.humidity}</p>} \r\n            {props.description && <p className=\"weather_key\"> Condition : {props.description}</p>} \r\n               {props.error && <p className=\"weather_key\" >{props.error} </p>} \r\n           \r\n           \r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default Weather;","import React from 'react';\nimport Title from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = 'e43c60c1d74b3bccd1b3654eb8db80bd';\n\n\nclass App extends React.Component{\n  state = {\n    temperature : undefined,\n    city : undefined,\n    country : undefined,\n    humidity : undefined,\n    description : undefined,\n    error : undefined\n  }\n\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch (`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    if (city && country) {\n      console.log(data); \n      this.setState({\n        temperature: data.main.temp,\n        city:data.name,\n        country: data.sys.country,\n        humidity:data.main.humidity,\n        description:data.weather[0].description,\n        error:''\n      })\n\n    }else{\n      this.setState({\n        temperature: undefined,\n        city:undefined,\n        country: undefined,\n        humidity:undefined,\n        description: undefined,\n        error:'Pls do enter values in the input Box\\'s above'\n      })\n    }\n  \n\n  }\n  render () {\n    \n    return (\n     \n   <div>\n       <div className='wrapper'>\n           <div className=\"main\">\n                <div className=\"container\">\n                   <div className=\"row\">\n                     <div className=\"col-sm-6 title-container\">\n                     <Title />\n                     </div>\n                     <div className=\"col-sm-6 form-container\">\n                     <Form  getWeather={this.getWeather} />\n                     <Weather \n                     temperature = {this.state.temperature}\n                     city = {this.state.city}\n                     country = {this.state.country}\n                     humidity = {this.state.humidity}\n                     description = {this.state.description}\n                     error = {this.state.error}\n                />\n                     </div>\n                   </div>\n                </div>\n           </div>\n       </div>\n   </div>\n    \n    )\n  }\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}